// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/adapter/web/handler/echo_test.go

// Package mock_handler is a generated GoMock package.
package mock

import (
	io "io"
	multipart "mime/multipart"
	http "net/http"
	url "net/url"
	reflect "reflect"
	"time"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockEchoContext is a mock of Context interface.
type MockEchoContext struct {
	ctrl     *gomock.Controller
	recorder *MockEchoContextMockRecorder
}

func (m *MockEchoContext) Deadline() (deadline time.Time, ok bool) {
	//TODO implement me
	panic("implement me")
}

func (m *MockEchoContext) Done() <-chan struct{} {
	//TODO implement me
	panic("implement me")
}

// MockEchoContextMockRecorder is the mock recorder for MockEchoContext.
type MockEchoContextMockRecorder struct {
	mock *MockEchoContext
}

// NewMockEchoContext creates a new mock instance.
func NewMockEchoContext(ctrl *gomock.Controller) *MockEchoContext {
	mock := &MockEchoContext{ctrl: ctrl}
	mock.recorder = &MockEchoContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoContext) EXPECT() *MockEchoContextMockRecorder {
	return m.recorder
}

// Attachment mocks base method.
func (m *MockEchoContext) Attachment(file, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attachment", file, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attachment indicates an expected call of Attachment.
func (mr *MockEchoContextMockRecorder) Attachment(file, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attachment", reflect.TypeOf((*MockEchoContext)(nil).Attachment), file, name)
}

// Bind mocks base method.
func (m *MockEchoContext) Bind(i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockEchoContextMockRecorder) Bind(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockEchoContext)(nil).Bind), i)
}

// Blob mocks base method.
func (m *MockEchoContext) Blob(code int, contentType string, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blob", code, contentType, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blob indicates an expected call of Blob.
func (mr *MockEchoContextMockRecorder) Blob(code, contentType, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blob", reflect.TypeOf((*MockEchoContext)(nil).Blob), code, contentType, b)
}

// Cookie mocks base method.
func (m *MockEchoContext) Cookie(name string) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", name)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cookie indicates an expected call of Cookie.
func (mr *MockEchoContextMockRecorder) Cookie(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockEchoContext)(nil).Cookie), name)
}

// Cookies mocks base method.
func (m *MockEchoContext) Cookies() []*http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookies")
	ret0, _ := ret[0].([]*http.Cookie)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockEchoContextMockRecorder) Cookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockEchoContext)(nil).Cookies))
}

// Echo mocks base method.
func (m *MockEchoContext) Echo() *echo.Echo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo")
	ret0, _ := ret[0].(*echo.Echo)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockEchoContextMockRecorder) Echo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockEchoContext)(nil).Echo))
}

// Error mocks base method.
func (m *MockEchoContext) Error(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockEchoContextMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockEchoContext)(nil).Error), err)
}

// File mocks base method.
func (m *MockEchoContext) File(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// File indicates an expected call of File.
func (mr *MockEchoContextMockRecorder) File(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockEchoContext)(nil).File), file)
}

// FormFile mocks base method.
func (m *MockEchoContext) FormFile(name string) (*multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormFile", name)
	ret0, _ := ret[0].(*multipart.FileHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormFile indicates an expected call of FormFile.
func (mr *MockEchoContextMockRecorder) FormFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockEchoContext)(nil).FormFile), name)
}

// FormParams mocks base method.
func (m *MockEchoContext) FormParams() (url.Values, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormParams")
	ret0, _ := ret[0].(url.Values)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormParams indicates an expected call of FormParams.
func (mr *MockEchoContextMockRecorder) FormParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormParams", reflect.TypeOf((*MockEchoContext)(nil).FormParams))
}

// FormValue mocks base method.
func (m *MockEchoContext) FormValue(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormValue", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormValue indicates an expected call of FormValue.
func (mr *MockEchoContextMockRecorder) FormValue(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormValue", reflect.TypeOf((*MockEchoContext)(nil).FormValue), name)
}

// Get mocks base method.
func (m *MockEchoContext) Get(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockEchoContextMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEchoContext)(nil).Get), key)
}

// HTML mocks base method.
func (m *MockEchoContext) HTML(code int, html string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML", code, html)
	ret0, _ := ret[0].(error)
	return ret0
}

// HTML indicates an expected call of HTML.
func (mr *MockEchoContextMockRecorder) HTML(code, html interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockEchoContext)(nil).HTML), code, html)
}

// HTMLBlob mocks base method.
func (m *MockEchoContext) HTMLBlob(code int, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTMLBlob", code, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// HTMLBlob indicates an expected call of HTMLBlob.
func (mr *MockEchoContextMockRecorder) HTMLBlob(code, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTMLBlob", reflect.TypeOf((*MockEchoContext)(nil).HTMLBlob), code, b)
}

// Handler mocks base method.
func (m *MockEchoContext) Handler() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockEchoContextMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockEchoContext)(nil).Handler))
}

// Inline mocks base method.
func (m *MockEchoContext) Inline(file, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inline", file, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inline indicates an expected call of Inline.
func (mr *MockEchoContextMockRecorder) Inline(file, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inline", reflect.TypeOf((*MockEchoContext)(nil).Inline), file, name)
}

// IsTLS mocks base method.
func (m *MockEchoContext) IsTLS() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTLS")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTLS indicates an expected call of IsTLS.
func (mr *MockEchoContextMockRecorder) IsTLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTLS", reflect.TypeOf((*MockEchoContext)(nil).IsTLS))
}

// IsWebSocket mocks base method.
func (m *MockEchoContext) IsWebSocket() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWebSocket")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWebSocket indicates an expected call of IsWebSocket.
func (mr *MockEchoContextMockRecorder) IsWebSocket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWebSocket", reflect.TypeOf((*MockEchoContext)(nil).IsWebSocket))
}

// JSON mocks base method.
func (m *MockEchoContext) JSON(code int, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSON", code, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSON indicates an expected call of JSON.
func (mr *MockEchoContextMockRecorder) JSON(code, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockEchoContext)(nil).JSON), code, i)
}

// JSONBlob mocks base method.
func (m *MockEchoContext) JSONBlob(code int, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONBlob", code, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONBlob indicates an expected call of JSONBlob.
func (mr *MockEchoContextMockRecorder) JSONBlob(code, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONBlob", reflect.TypeOf((*MockEchoContext)(nil).JSONBlob), code, b)
}

// JSONP mocks base method.
func (m *MockEchoContext) JSONP(code int, callback string, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONP", code, callback, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONP indicates an expected call of JSONP.
func (mr *MockEchoContextMockRecorder) JSONP(code, callback, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONP", reflect.TypeOf((*MockEchoContext)(nil).JSONP), code, callback, i)
}

// JSONPBlob mocks base method.
func (m *MockEchoContext) JSONPBlob(code int, callback string, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONPBlob", code, callback, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONPBlob indicates an expected call of JSONPBlob.
func (mr *MockEchoContextMockRecorder) JSONPBlob(code, callback, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONPBlob", reflect.TypeOf((*MockEchoContext)(nil).JSONPBlob), code, callback, b)
}

// JSONPretty mocks base method.
func (m *MockEchoContext) JSONPretty(code int, i interface{}, indent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONPretty", code, i, indent)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONPretty indicates an expected call of JSONPretty.
func (mr *MockEchoContextMockRecorder) JSONPretty(code, i, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONPretty", reflect.TypeOf((*MockEchoContext)(nil).JSONPretty), code, i, indent)
}

// Logger mocks base method.
func (m *MockEchoContext) Logger() echo.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(echo.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockEchoContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockEchoContext)(nil).Logger))
}

// MultipartForm mocks base method.
func (m *MockEchoContext) MultipartForm() (*multipart.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartForm")
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartForm indicates an expected call of MultipartForm.
func (mr *MockEchoContextMockRecorder) MultipartForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartForm", reflect.TypeOf((*MockEchoContext)(nil).MultipartForm))
}

// NoContent mocks base method.
func (m *MockEchoContext) NoContent(code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoContent", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// NoContent indicates an expected call of NoContent.
func (mr *MockEchoContextMockRecorder) NoContent(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoContent", reflect.TypeOf((*MockEchoContext)(nil).NoContent), code)
}

// Param mocks base method.
func (m *MockEchoContext) Param(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockEchoContextMockRecorder) Param(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockEchoContext)(nil).Param), name)
}

// ParamNames mocks base method.
func (m *MockEchoContext) ParamNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ParamNames indicates an expected call of ParamNames.
func (mr *MockEchoContextMockRecorder) ParamNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamNames", reflect.TypeOf((*MockEchoContext)(nil).ParamNames))
}

// ParamValues mocks base method.
func (m *MockEchoContext) ParamValues() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamValues")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ParamValues indicates an expected call of ParamValues.
func (mr *MockEchoContextMockRecorder) ParamValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamValues", reflect.TypeOf((*MockEchoContext)(nil).ParamValues))
}

// Path mocks base method.
func (m *MockEchoContext) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockEchoContextMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockEchoContext)(nil).Path))
}

// QueryParam mocks base method.
func (m *MockEchoContext) QueryParam(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryParam", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryParam indicates an expected call of QueryParam.
func (mr *MockEchoContextMockRecorder) QueryParam(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryParam", reflect.TypeOf((*MockEchoContext)(nil).QueryParam), name)
}

// QueryParams mocks base method.
func (m *MockEchoContext) QueryParams() url.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryParams")
	ret0, _ := ret[0].(url.Values)
	return ret0
}

// QueryParams indicates an expected call of QueryParams.
func (mr *MockEchoContextMockRecorder) QueryParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryParams", reflect.TypeOf((*MockEchoContext)(nil).QueryParams))
}

// QueryString mocks base method.
func (m *MockEchoContext) QueryString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryString")
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryString indicates an expected call of QueryString.
func (mr *MockEchoContextMockRecorder) QueryString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryString", reflect.TypeOf((*MockEchoContext)(nil).QueryString))
}

// RealIP mocks base method.
func (m *MockEchoContext) RealIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// RealIP indicates an expected call of RealIP.
func (mr *MockEchoContextMockRecorder) RealIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealIP", reflect.TypeOf((*MockEchoContext)(nil).RealIP))
}

// Redirect mocks base method.
func (m *MockEchoContext) Redirect(code int, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", code, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockEchoContextMockRecorder) Redirect(code, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockEchoContext)(nil).Redirect), code, url)
}

// Render mocks base method.
func (m *MockEchoContext) Render(code int, name string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", code, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockEchoContextMockRecorder) Render(code, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockEchoContext)(nil).Render), code, name, data)
}

// Request mocks base method.
func (m *MockEchoContext) Request() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockEchoContextMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockEchoContext)(nil).Request))
}

// Reset mocks base method.
func (m *MockEchoContext) Reset(r *http.Request, w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", r, w)
}

// Reset indicates an expected call of Reset.
func (mr *MockEchoContextMockRecorder) Reset(r, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockEchoContext)(nil).Reset), r, w)
}

// Response mocks base method.
func (m *MockEchoContext) Response() *echo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(*echo.Response)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockEchoContextMockRecorder) Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockEchoContext)(nil).Response))
}

// Scheme mocks base method.
func (m *MockEchoContext) Scheme() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(string)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockEchoContextMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockEchoContext)(nil).Scheme))
}

// Set mocks base method.
func (m *MockEchoContext) Set(key string, val interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val)
}

// Set indicates an expected call of Set.
func (mr *MockEchoContextMockRecorder) Set(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEchoContext)(nil).Set), key, val)
}

// SetCookie mocks base method.
func (m *MockEchoContext) SetCookie(cookie *http.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", cookie)
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockEchoContextMockRecorder) SetCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockEchoContext)(nil).SetCookie), cookie)
}

// SetHandler mocks base method.
func (m *MockEchoContext) SetHandler(h echo.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHandler", h)
}

// SetHandler indicates an expected call of SetHandler.
func (mr *MockEchoContextMockRecorder) SetHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandler", reflect.TypeOf((*MockEchoContext)(nil).SetHandler), h)
}

// SetLogger mocks base method.
func (m *MockEchoContext) SetLogger(l echo.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", l)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockEchoContextMockRecorder) SetLogger(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockEchoContext)(nil).SetLogger), l)
}

// SetParamNames mocks base method.
func (m *MockEchoContext) SetParamNames(names ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetParamNames", varargs...)
}

// SetParamNames indicates an expected call of SetParamNames.
func (mr *MockEchoContextMockRecorder) SetParamNames(names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParamNames", reflect.TypeOf((*MockEchoContext)(nil).SetParamNames), names...)
}

// SetParamValues mocks base method.
func (m *MockEchoContext) SetParamValues(values ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetParamValues", varargs...)
}

// SetParamValues indicates an expected call of SetParamValues.
func (mr *MockEchoContextMockRecorder) SetParamValues(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParamValues", reflect.TypeOf((*MockEchoContext)(nil).SetParamValues), values...)
}

// SetPath mocks base method.
func (m *MockEchoContext) SetPath(p string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", p)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockEchoContextMockRecorder) SetPath(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockEchoContext)(nil).SetPath), p)
}

// SetRequest mocks base method.
func (m *MockEchoContext) SetRequest(r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequest", r)
}

// SetRequest indicates an expected call of SetRequest.
func (mr *MockEchoContextMockRecorder) SetRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequest", reflect.TypeOf((*MockEchoContext)(nil).SetRequest), r)
}

// SetResponse mocks base method.
func (m *MockEchoContext) SetResponse(r *echo.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponse", r)
}

// SetResponse indicates an expected call of SetResponse.
func (mr *MockEchoContextMockRecorder) SetResponse(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponse", reflect.TypeOf((*MockEchoContext)(nil).SetResponse), r)
}

// Stream mocks base method.
func (m *MockEchoContext) Stream(code int, contentType string, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", code, contentType, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockEchoContextMockRecorder) Stream(code, contentType, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockEchoContext)(nil).Stream), code, contentType, r)
}

// String mocks base method.
func (m *MockEchoContext) String(code int, s string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", code, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockEchoContextMockRecorder) String(code, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockEchoContext)(nil).String), code, s)
}

// Validate mocks base method.
func (m *MockEchoContext) Validate(i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockEchoContextMockRecorder) Validate(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEchoContext)(nil).Validate), i)
}

// XML mocks base method.
func (m *MockEchoContext) XML(code int, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XML", code, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// XML indicates an expected call of XML.
func (mr *MockEchoContextMockRecorder) XML(code, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockEchoContext)(nil).XML), code, i)
}

// XMLBlob mocks base method.
func (m *MockEchoContext) XMLBlob(code int, b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XMLBlob", code, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// XMLBlob indicates an expected call of XMLBlob.
func (mr *MockEchoContextMockRecorder) XMLBlob(code, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XMLBlob", reflect.TypeOf((*MockEchoContext)(nil).XMLBlob), code, b)
}

// XMLPretty mocks base method.
func (m *MockEchoContext) XMLPretty(code int, i interface{}, indent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XMLPretty", code, i, indent)
	ret0, _ := ret[0].(error)
	return ret0
}

// XMLPretty indicates an expected call of XMLPretty.
func (mr *MockEchoContextMockRecorder) XMLPretty(code, i, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XMLPretty", reflect.TypeOf((*MockEchoContext)(nil).XMLPretty), code, i, indent)
}

