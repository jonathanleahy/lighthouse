// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/infrastructure/network/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	network "github.com/pismo/backoffice-core-bff/internal/app/infrastructure/network"
)

// MockHttpService is a mock of HttpService interface.
type MockHttpService struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServiceMockRecorder
}

// MockHttpServiceMockRecorder is the mock recorder for MockHttpService.
type MockHttpServiceMockRecorder struct {
	mock *MockHttpService
}

// NewMockHttpService creates a new mock instance.
func NewMockHttpService(ctrl *gomock.Controller) *MockHttpService {
	mock := &MockHttpService{ctrl: ctrl}
	mock.recorder = &MockHttpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpService) EXPECT() *MockHttpServiceMockRecorder {
	return m.recorder
}

// HttpRequest mocks base method.
func (m *MockHttpService) HttpRequest(ctx context.Context, req *network.Request) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpRequest", ctx, req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HttpRequest indicates an expected call of HttpRequest.
func (mr *MockHttpServiceMockRecorder) HttpRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpRequest", reflect.TypeOf((*MockHttpService)(nil).HttpRequest), ctx, req)
}

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// SendAuditEvent mocks base method.
func (m *MockAuditService) SendAuditEvent(ctx context.Context, domain, action, domainID, request, response string, responseCode int) chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuditEvent", ctx, domain, action, domainID, request, response, responseCode)
	ret0, _ := ret[0].(chan error)
	return ret0
}

// SendAuditEvent indicates an expected call of SendAuditEvent.
func (mr *MockAuditServiceMockRecorder) SendAuditEvent(ctx, domain, action, domainID, request, response, responseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuditEvent", reflect.TypeOf((*MockAuditService)(nil).SendAuditEvent), ctx, domain, action, domainID, request, response, responseCode)
}

