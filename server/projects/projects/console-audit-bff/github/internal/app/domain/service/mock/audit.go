// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/domain/service/audit.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/pismo/console-audit-bff/internal/app/adapter/web/graphql/entity"
	presenter "github.com/pismo/console-audit-bff/internal/app/adapter/web/presenter"
)

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// AttachRoleToFeature mocks base method.
func (m *MockAuditService) AttachRoleToFeature(ctx context.Context, id, featureID int, action entity.ActionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachRoleToFeature", ctx, id, featureID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachRoleToFeature indicates an expected call of AttachRoleToFeature.
func (mr *MockAuditServiceMockRecorder) AttachRoleToFeature(ctx, id, featureID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachRoleToFeature", reflect.TypeOf((*MockAuditService)(nil).AttachRoleToFeature), ctx, id, featureID, action)
}

// AttachRoleToUser mocks base method.
func (m *MockAuditService) AttachRoleToUser(ctx context.Context, id int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachRoleToUser", ctx, id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachRoleToUser indicates an expected call of AttachRoleToUser.
func (mr *MockAuditServiceMockRecorder) AttachRoleToUser(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachRoleToUser", reflect.TypeOf((*MockAuditService)(nil).AttachRoleToUser), ctx, id, email)
}

// CreateEndpoint mocks base method.
func (m *MockAuditService) CreateEndpoint(ctx context.Context, endpoint *entity.EndpointInput, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpoint", ctx, endpoint, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEndpoint indicates an expected call of CreateEndpoint.
func (mr *MockAuditServiceMockRecorder) CreateEndpoint(ctx, endpoint, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpoint", reflect.TypeOf((*MockAuditService)(nil).CreateEndpoint), ctx, endpoint, user, actions, domains, domainID, cid)
}

// CreateFeature mocks base method.
func (m *MockAuditService) CreateFeature(ctx context.Context, feature *entity.FeatureInput, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", ctx, feature, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockAuditServiceMockRecorder) CreateFeature(ctx, feature, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockAuditService)(nil).CreateFeature), ctx, feature, user, actions, domains, domainID, cid)
}

// CreateRole mocks base method.
func (m *MockAuditService) CreateRole(ctx context.Context, role *entity.RoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockAuditServiceMockRecorder) CreateRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockAuditService)(nil).CreateRole), ctx, role)
}

// DeleteEndpoint mocks base method.
func (m *MockAuditService) DeleteEndpoint(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockAuditServiceMockRecorder) DeleteEndpoint(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockAuditService)(nil).DeleteEndpoint), ctx, id)
}

// DeleteFeature mocks base method.
func (m *MockAuditService) DeleteFeature(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockAuditServiceMockRecorder) DeleteFeature(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockAuditService)(nil).DeleteFeature), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockAuditService) DeleteRole(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockAuditServiceMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockAuditService)(nil).DeleteRole), ctx, id)
}

// DetachRoleToFeature mocks base method.
func (m *MockAuditService) DetachRoleToFeature(ctx context.Context, id, featureID int, action entity.ActionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachRoleToFeature", ctx, id, featureID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachRoleToFeature indicates an expected call of DetachRoleToFeature.
func (mr *MockAuditServiceMockRecorder) DetachRoleToFeature(ctx, id, featureID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachRoleToFeature", reflect.TypeOf((*MockAuditService)(nil).DetachRoleToFeature), ctx, id, featureID, action)
}

// DetachRoleToUser mocks base method.
func (m *MockAuditService) DetachRoleToUser(ctx context.Context, id int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachRoleToUser", ctx, id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachRoleToUser indicates an expected call of DetachRoleToUser.
func (mr *MockAuditServiceMockRecorder) DetachRoleToUser(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachRoleToUser", reflect.TypeOf((*MockAuditService)(nil).DetachRoleToUser), ctx, id, email)
}

// FindAuditByID mocks base method.
func (m *MockAuditService) FindAuditByID(ctx context.Context, id int) (*presenter.Audit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuditByID", ctx, id)
	ret0, _ := ret[0].(*presenter.Audit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuditByID indicates an expected call of FindAuditByID.
func (mr *MockAuditServiceMockRecorder) FindAuditByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuditByID", reflect.TypeOf((*MockAuditService)(nil).FindAuditByID), ctx, id)
}

// FindEndpointByID mocks base method.
func (m *MockAuditService) FindEndpointByID(ctx context.Context, id int) (*entity.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEndpointByID", ctx, id)
	ret0, _ := ret[0].(*entity.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEndpointByID indicates an expected call of FindEndpointByID.
func (mr *MockAuditServiceMockRecorder) FindEndpointByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEndpointByID", reflect.TypeOf((*MockAuditService)(nil).FindEndpointByID), ctx, id)
}

// FindFeatureByID mocks base method.
func (m *MockAuditService) FindFeatureByID(ctx context.Context, id int) (*entity.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFeatureByID", ctx, id)
	ret0, _ := ret[0].(*entity.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFeatureByID indicates an expected call of FindFeatureByID.
func (mr *MockAuditServiceMockRecorder) FindFeatureByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFeatureByID", reflect.TypeOf((*MockAuditService)(nil).FindFeatureByID), ctx, id)
}

// ListRoles mocks base method.
func (m *MockAuditService) ListRoles(ctx context.Context) ([]*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx)
	ret0, _ := ret[0].([]*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockAuditServiceMockRecorder) ListRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockAuditService)(nil).ListRoles), ctx)
}

// ListUserRoles mocks base method.
func (m *MockAuditService) ListUserRoles(ctx context.Context, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) (*presenter.UserRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRoles", ctx, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(*presenter.UserRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRoles indicates an expected call of ListUserRoles.
func (mr *MockAuditServiceMockRecorder) ListUserRoles(ctx, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockAuditService)(nil).ListUserRoles), ctx, user, actions, domains, domainID, cid)
}

// SearchAudit mocks base method.
func (m *MockAuditService) SearchAudit(ctx context.Context, page, perPage *int, order *entity.Order, beginDate, endDate, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) (*presenter.SearchAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAudit", ctx, page, perPage, order, beginDate, endDate, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(*presenter.SearchAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAudit indicates an expected call of SearchAudit.
func (mr *MockAuditServiceMockRecorder) SearchAudit(ctx, page, perPage, order, beginDate, endDate, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAudit", reflect.TypeOf((*MockAuditService)(nil).SearchAudit), ctx, page, perPage, order, beginDate, endDate, user, actions, domains, domainID, cid)
}

// SearchEndpoint mocks base method.
func (m *MockAuditService) SearchEndpoint(ctx context.Context, page, perPage *int, order *entity.Order, id, service_name, method, path, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) (*presenter.SearchEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEndpoint", ctx, page, perPage, order, id, service_name, method, path, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(*presenter.SearchEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEndpoint indicates an expected call of SearchEndpoint.
func (mr *MockAuditServiceMockRecorder) SearchEndpoint(ctx, page, perPage, order, id, service_name, method, path, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEndpoint", reflect.TypeOf((*MockAuditService)(nil).SearchEndpoint), ctx, page, perPage, order, id, service_name, method, path, user, actions, domains, domainID, cid)
}

// SearchFeature mocks base method.
func (m *MockAuditService) SearchFeature(ctx context.Context, page, perPage *int, order *entity.Order, id, name, parentFeatureID, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) (*presenter.SearchFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFeature", ctx, page, perPage, order, id, name, parentFeatureID, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(*presenter.SearchFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFeature indicates an expected call of SearchFeature.
func (mr *MockAuditServiceMockRecorder) SearchFeature(ctx, page, perPage, order, id, name, parentFeatureID, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFeature", reflect.TypeOf((*MockAuditService)(nil).SearchFeature), ctx, page, perPage, order, id, name, parentFeatureID, user, actions, domains, domainID, cid)
}

// SearchRoles mocks base method.
func (m *MockAuditService) SearchRoles(ctx context.Context, email, feature *string) (presenter.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRoles", ctx, email, feature)
	ret0, _ := ret[0].(presenter.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRoles indicates an expected call of SearchRoles.
func (mr *MockAuditServiceMockRecorder) SearchRoles(ctx, email, feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRoles", reflect.TypeOf((*MockAuditService)(nil).SearchRoles), ctx, email, feature)
}

// UpdateEndpoint mocks base method.
func (m *MockAuditService) UpdateEndpoint(ctx context.Context, endpoint *entity.EndpointInput, id int, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoint", ctx, endpoint, id, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndpoint indicates an expected call of UpdateEndpoint.
func (mr *MockAuditServiceMockRecorder) UpdateEndpoint(ctx, endpoint, id, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoint", reflect.TypeOf((*MockAuditService)(nil).UpdateEndpoint), ctx, endpoint, id, user, actions, domains, domainID, cid)
}

// UpdateFeature mocks base method.
func (m *MockAuditService) UpdateFeature(ctx context.Context, feature *entity.FeatureInput, id int, user *string, actions []entity.AuditAction, domains []string, domainID, cid *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", ctx, feature, id, user, actions, domains, domainID, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockAuditServiceMockRecorder) UpdateFeature(ctx, feature, id, user, actions, domains, domainID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockAuditService)(nil).UpdateFeature), ctx, feature, id, user, actions, domains, domainID, cid)
}

// UpdateRole mocks base method.
func (m *MockAuditService) UpdateRole(ctx context.Context, role *entity.RoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockAuditServiceMockRecorder) UpdateRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockAuditService)(nil).UpdateRole), ctx, role)
}

