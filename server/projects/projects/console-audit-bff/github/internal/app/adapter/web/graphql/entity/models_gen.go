// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entity

import (
	"fmt"
	"io"
	"strconv"
)

type ActionInput struct {
	Action PermissionAction `json:"action"`
}

type Audit struct {
	ID           int           `json:"id"`
	Operation    *Operation    `json:"operation,omitempty"`
	User         *User         `json:"user,omitempty"`
	UserAgent    *UserAgent    `json:"user_agent,omitempty"`
	Localization *Localization `json:"localization,omitempty"`
	HTTP         *HTTP         `json:"http,omitempty"`
}

type Endpoint struct {
	ID          int     `json:"id"`
	ServiceName *string `json:"service_name,omitempty"`
	Path        *string `json:"path,omitempty"`
	Method      *string `json:"method,omitempty"`
}

type EndpointInput struct {
	ServiceName string `json:"service_name"`
	Method      string `json:"method"`
	Path        string `json:"path"`
}

type Feature struct {
	ID              int     `json:"id"`
	Name            *string `json:"name,omitempty"`
	ParentFeatureID *int    `json:"parentFeatureID,omitempty"`
}

type FeatureInput struct {
	Name            string `json:"name"`
	ParentFeatureID *int   `json:"parentFeatureID,omitempty"`
}

type HTTP struct {
	Code     int    `json:"code"`
	Request  string `json:"request"`
	Response string `json:"response"`
}

type ListRoles struct {
	Data *string `json:"data,omitempty"`
}

type ListUserRoles struct {
	Roles []string `json:"roles,omitempty"`
}

type Localization struct {
	Latitude  *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
}

type Mutation struct {
}

type Operation struct {
	Tenant   string  `json:"tenant"`
	Action   string  `json:"action"`
	Domain   string  `json:"domain"`
	DomainID string  `json:"domain_id"`
	Origin   *string `json:"origin,omitempty"`
	Cid      string  `json:"cid"`
	Date     string  `json:"date"`
}

type Query struct {
}

type Role struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type RoleInput struct {
	ID   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

type SearchAudit struct {
	CurrentPage int      `json:"current_page"`
	Pages       int      `json:"pages"`
	PerPage     int      `json:"per_page"`
	TotalItems  int      `json:"total_items"`
	Audits      []*Audit `json:"audits,omitempty"`
}

type SearchEndpoint struct {
	CurrentPage int         `json:"current_page"`
	Pages       int         `json:"pages"`
	PerPage     int         `json:"per_page"`
	TotalItems  int         `json:"total_items"`
	Endpoints   []*Endpoint `json:"endpoints,omitempty"`
}

type SearchFeature struct {
	CurrentPage int        `json:"current_page"`
	Pages       int        `json:"pages"`
	PerPage     int        `json:"per_page"`
	TotalItems  int        `json:"total_items"`
	Features    []*Feature `json:"features,omitempty"`
}

type User struct {
	Email string   `json:"email"`
	Roles []string `json:"roles"`
}

type UserAgent struct {
	Device   *string `json:"device,omitempty"`
	DeviceIP *string `json:"device_ip,omitempty"`
}

type AuditAction string

const (
	AuditActionCreate AuditAction = "create"
	AuditActionRead   AuditAction = "read"
	AuditActionUpdate AuditAction = "update"
	AuditActionDelete AuditAction = "delete"
	AuditActionList   AuditAction = "list"
)

var AllAuditAction = []AuditAction{
	AuditActionCreate,
	AuditActionRead,
	AuditActionUpdate,
	AuditActionDelete,
	AuditActionList,
}

func (e AuditAction) IsValid() bool {
	switch e {
	case AuditActionCreate, AuditActionRead, AuditActionUpdate, AuditActionDelete, AuditActionList:
		return true
	}
	return false
}

func (e AuditAction) String() string {
	return string(e)
}

func (e *AuditAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditAction", str)
	}
	return nil
}

func (e AuditAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderAsc  Order = "asc"
	OrderDesc Order = "desc"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PermissionAction string

const (
	PermissionActionRead  PermissionAction = "read"
	PermissionActionWrite PermissionAction = "write"
)

var AllPermissionAction = []PermissionAction{
	PermissionActionRead,
	PermissionActionWrite,
}

func (e PermissionAction) IsValid() bool {
	switch e {
	case PermissionActionRead, PermissionActionWrite:
		return true
	}
	return false
}

func (e PermissionAction) String() string {
	return string(e)
}

func (e *PermissionAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionAction", str)
	}
	return nil
}

func (e PermissionAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

